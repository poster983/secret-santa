(()=>{"use strict";const e="function"==typeof btoa,t="function"==typeof Buffer,n=("function"==typeof TextDecoder&&new TextDecoder,"function"==typeof TextEncoder?new TextEncoder:void 0),r=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),o=((e=>{let t={};e.forEach(((e,n)=>t[e]=n))})(r),String.fromCharCode.bind(String)),a=("function"==typeof Uint8Array.from&&Uint8Array.from.bind(Uint8Array),e=>e.replace(/=/g,"").replace(/[+\/]/g,(e=>"+"==e?"-":"_"))),c=e?e=>btoa(e):t?e=>Buffer.from(e,"binary").toString("base64"):e=>{let t,n,o,a,c="";const l=e.length%3;for(let l=0;l<e.length;){if((n=e.charCodeAt(l++))>255||(o=e.charCodeAt(l++))>255||(a=e.charCodeAt(l++))>255)throw new TypeError("invalid character found");t=n<<16|o<<8|a,c+=r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}return l?c.slice(0,l-3)+"===".substring(l):c},l=t?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let n=0,r=e.length;n<r;n+=4096)t.push(o.apply(null,e.subarray(n,n+4096)));return c(t.join(""))},i=e=>{if(e.length<2)return(t=e.charCodeAt(0))<128?e:t<2048?o(192|t>>>6)+o(128|63&t):o(224|t>>>12&15)+o(128|t>>>6&63)+o(128|63&t);var t=65536+1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320);return o(240|t>>>18&7)+o(128|t>>>12&63)+o(128|t>>>6&63)+o(128|63&t)},d=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,u=t?e=>Buffer.from(e,"utf8").toString("base64"):n?e=>l(n.encode(e)):e=>c(e.replace(d,i)),s=(e,t=!1)=>t?a(u(e)):u(e);console.log("Hello!");const p=document.getElementById("name-list"),m=document.getElementById("submit"),f=document.getElementById("log"),h=document.getElementById("table"),g=document.getElementById("special-rules"),y=document.getElementById("show-recipients"),E=window.location.href.replace("/generator.html","");let v,C=(...e)=>{console.error(...e);let t=document.createElement("p");t.style.color="red",t.innerText=e.join(", "),f.prepend(t)},b=()=>{let e=document.querySelector('input[name="sep"]:checked').value,t=p.value;if(""==p.value)return void C("Must have at least 2 names");if(t="newline"===e?p.value.split("\n"):p.value.split(","),t.length<2)return void C("Must have at least 2 names");t=t.map((e=>e.trim()));let n=B(t);n=A(n);const r=n.map((e=>{const t={recipient:e[1],specialRules:""==g.value?null:g.value},n=`${E}?santa=${encodeURIComponent(e[0])}&data=${encodeURIComponent(s(JSON.stringify(t)))}`,r=document.createElement("span");return r.onclick=()=>{navigator.clipboard.writeText(n)},r.innerHTML=n,[e[0],r,e[1]]})),o="output";((e,t,n,r=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}())=>{e.innerHTML="";const o=document.createElement("tr");t.forEach(((e,t)=>{const n=document.createElement("th");n.innerHTML=e,o.appendChild(n)})),e.appendChild(o),n.forEach((t=>{const n=document.createElement("tr");t.forEach(((e,t)=>{const o=document.createElement("td");o.classList.add(`${r}-item-${t}`),"object"==typeof e?o.appendChild(e):o.innerHTML=e,n.appendChild(o)})),e.appendChild(n)}))})(h,["Santa","Santa's Link (click to copy)","Recipient"],r,o),v&&y.removeEventListener("change",v),v=()=>{document.querySelectorAll(`.${o}-item-2`).forEach((e=>{e.style.display=y.checked?null:"none"}))},v(),y.addEventListener("change",v)},A=e=>e.map((e=>({value:e,sort:Math.random()}))).sort(((e,t)=>e.sort-t.sort)).map((({value:e})=>e)),B=e=>{let t=A(e);return t.map(((e,n)=>t[n+1]?[e,t[n+1]]:[e,t[0]]))};m.addEventListener("click",(()=>{b()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,