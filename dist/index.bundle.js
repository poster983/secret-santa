(()=>{"use strict";const t="function"==typeof atob,e="function"==typeof Buffer,n="function"==typeof TextDecoder?new TextDecoder:void 0,r=(t=>{let e={};return t.forEach(((t,n)=>e[t]=n)),e})(("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="))),a=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,o=String.fromCharCode.bind(String),i="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):(t,e=(t=>t))=>new Uint8Array(Array.prototype.slice.call(t,0).map(e)),u=t=>t.replace(/[^A-Za-z0-9\+\/]/g,""),s=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,c=t=>{switch(t.length){case 4:var e=((7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3))-65536;return o(55296+(e>>>10))+o(56320+(1023&e));case 3:return o((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return o((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}},l=t?t=>atob(u(t)):e?t=>Buffer.from(t,"base64").toString("binary"):t=>{if(t=t.replace(/\s+/g,""),!a.test(t))throw new TypeError("malformed base64.");t+="==".slice(2-(3&t.length));let e,n,i,u="";for(let a=0;a<t.length;)e=r[t.charAt(a++)]<<18|r[t.charAt(a++)]<<12|(n=r[t.charAt(a++)])<<6|(i=r[t.charAt(a++)]),u+=64===n?o(e>>16&255):64===i?o(e>>16&255,e>>8&255):o(e>>16&255,e>>8&255,255&e);return u},f=e?t=>i(Buffer.from(t,"base64")):t=>i(l(t),(t=>t.charCodeAt(0))),d=e?t=>Buffer.from(t,"base64").toString("utf8"):n?t=>n.decode(f(t)):t=>l(t).replace(s,c),h=t=>d(u(t.replace(/[-_]/g,(t=>"-"==t?"+":"/"))));var p={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},m={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},g=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],v={CSS:{},springs:{}};function y(t,e,n){return Math.min(Math.max(t,e),n)}function b(t,e){return t.indexOf(e)>-1}function w(t,e){return t.apply(null,e)}var x={arr:function(t){return Array.isArray(t)},obj:function(t){return b(Object.prototype.toString.call(t),"Object")},pth:function(t){return x.obj(t)&&t.hasOwnProperty("totalLength")},svg:function(t){return t instanceof SVGElement},inp:function(t){return t instanceof HTMLInputElement},dom:function(t){return t.nodeType||x.svg(t)},str:function(t){return"string"==typeof t},fnc:function(t){return"function"==typeof t},und:function(t){return void 0===t},nil:function(t){return x.und(t)||null===t},hex:function(t){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t)},rgb:function(t){return/^rgb/.test(t)},hsl:function(t){return/^hsl/.test(t)},col:function(t){return x.hex(t)||x.rgb(t)||x.hsl(t)},key:function(t){return!p.hasOwnProperty(t)&&!m.hasOwnProperty(t)&&"targets"!==t&&"keyframes"!==t}};function M(t){var e=/\(([^)]+)\)/.exec(t);return e?e[1].split(",").map((function(t){return parseFloat(t)})):[]}function B(t,e){var n=M(t),r=y(x.und(n[0])?1:n[0],.1,100),a=y(x.und(n[1])?100:n[1],.1,100),o=y(x.und(n[2])?10:n[2],.1,100),i=y(x.und(n[3])?0:n[3],.1,100),u=Math.sqrt(a/r),s=o/(2*Math.sqrt(a*r)),c=s<1?u*Math.sqrt(1-s*s):0,l=s<1?(s*u-i)/c:-i+u;function f(t){var n=e?e*t/1e3:t;return n=s<1?Math.exp(-n*s*u)*(1*Math.cos(c*n)+l*Math.sin(c*n)):(1+l*n)*Math.exp(-n*u),0===t||1===t?t:1-n}return e?f:function(){var e=v.springs[t];if(e)return e;for(var n=1/6,r=0,a=0;;)if(1===f(r+=n)){if(++a>=16)break}else a=0;var o=r*n*1e3;return v.springs[t]=o,o}}function I(t){return void 0===t&&(t=10),function(e){return Math.ceil(y(e,1e-6,1)*t)*(1/t)}}var E,C,A=function(){var t=.1;function e(t,e){return 1-3*e+3*t}function n(t,e){return 3*e-6*t}function r(t){return 3*t}function a(t,a,o){return((e(a,o)*t+n(a,o))*t+r(a))*t}function o(t,a,o){return 3*e(a,o)*t*t+2*n(a,o)*t+r(a)}return function(e,n,r,i){if(0<=e&&e<=1&&0<=r&&r<=1){var u=new Float32Array(11);if(e!==n||r!==i)for(var s=0;s<11;++s)u[s]=a(s*t,e,r);return function(s){return e===n&&r===i||0===s||1===s?s:a(function(n){for(var i=0,s=1;10!==s&&u[s]<=n;++s)i+=t;--s;var c=i+(n-u[s])/(u[s+1]-u[s])*t,l=o(c,e,r);return l>=.001?function(t,e,n,r){for(var i=0;i<4;++i){var u=o(e,n,r);if(0===u)return e;e-=(a(e,n,r)-t)/u}return e}(n,c,e,r):0===l?c:function(t,e,n,r,o){var i,u,s=0;do{(i=a(u=e+(n-e)/2,r,o)-t)>0?n=u:e=u}while(Math.abs(i)>1e-7&&++s<10);return u}(n,i,i+t,e,r)}(s),n,i)}}}}(),k=(E={linear:function(){return function(t){return t}}},C={Sine:function(){return function(t){return 1-Math.cos(t*Math.PI/2)}},Circ:function(){return function(t){return 1-Math.sqrt(1-t*t)}},Back:function(){return function(t){return t*t*(3*t-2)}},Bounce:function(){return function(t){for(var e,n=4;t<((e=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*e-2)/22-t,2)}},Elastic:function(t,e){void 0===t&&(t=1),void 0===e&&(e=.5);var n=y(t,1,10),r=y(e,.1,2);return function(t){return 0===t||1===t?t:-n*Math.pow(2,10*(t-1))*Math.sin((t-1-r/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/r)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(t,e){C[t]=function(){return function(t){return Math.pow(t,e+2)}}})),Object.keys(C).forEach((function(t){var e=C[t];E["easeIn"+t]=e,E["easeOut"+t]=function(t,n){return function(r){return 1-e(t,n)(1-r)}},E["easeInOut"+t]=function(t,n){return function(r){return r<.5?e(t,n)(2*r)/2:1-e(t,n)(-2*r+2)/2}},E["easeOutIn"+t]=function(t,n){return function(r){return r<.5?(1-e(t,n)(1-2*r))/2:(e(t,n)(2*r-1)+1)/2}}})),E);function T(t,e){if(x.fnc(t))return t;var n=t.split("(")[0],r=k[n],a=M(t);switch(n){case"spring":return B(t,e);case"cubicBezier":return w(A,a);case"steps":return w(I,a);default:return w(r,a)}}function P(t){try{return document.querySelectorAll(t)}catch(t){return}}function F(t,e){for(var n=t.length,r=arguments.length>=2?arguments[1]:void 0,a=[],o=0;o<n;o++)if(o in t){var i=t[o];e.call(r,i,o,t)&&a.push(i)}return a}function O(t){return t.reduce((function(t,e){return t.concat(x.arr(e)?O(e):e)}),[])}function D(t){return x.arr(t)?t:(x.str(t)&&(t=P(t)||t),t instanceof NodeList||t instanceof HTMLCollection?[].slice.call(t):[t])}function S(t,e){return t.some((function(t){return t===e}))}function N(t){var e={};for(var n in t)e[n]=t[n];return e}function L(t,e){var n=N(t);for(var r in t)n[r]=e.hasOwnProperty(r)?e[r]:t[r];return n}function z(t,e){var n=N(t);for(var r in e)n[r]=x.und(t[r])?e[r]:t[r];return n}function j(t){var e=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(t);if(e)return e[1]}function q(t,e){return x.fnc(t)?t(e.target,e.id,e.total):t}function V(t,e){return t.getAttribute(e)}function H(t,e,n){if(S([n,"deg","rad","turn"],j(e)))return e;var r=v.CSS[e+n];if(!x.und(r))return r;var a=document.createElement(t.tagName),o=t.parentNode&&t.parentNode!==document?t.parentNode:document.body;o.appendChild(a),a.style.position="absolute",a.style.width=100+n;var i=100/a.offsetWidth;o.removeChild(a);var u=i*parseFloat(e);return v.CSS[e+n]=u,u}function Z(t,e,n){if(e in t.style){var r=e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),a=t.style[e]||getComputedStyle(t).getPropertyValue(r)||"0";return n?H(t,a,n):a}}function R(t,e){return x.dom(t)&&!x.inp(t)&&(!x.nil(V(t,e))||x.svg(t)&&t[e])?"attribute":x.dom(t)&&S(g,e)?"transform":x.dom(t)&&"transform"!==e&&Z(t,e)?"css":null!=t[e]?"object":void 0}function U(t){if(x.dom(t)){for(var e,n=t.style.transform||"",r=/(\w+)\(([^)]*)\)/g,a=new Map;e=r.exec(n);)a.set(e[1],e[2]);return a}}function W(t,e,n,r){switch(R(t,e)){case"transform":return function(t,e,n,r){var a=b(e,"scale")?1:0+function(t){return b(t,"translate")||"perspective"===t?"px":b(t,"rotate")||b(t,"skew")?"deg":void 0}(e),o=U(t).get(e)||a;return n&&(n.transforms.list.set(e,o),n.transforms.last=e),r?H(t,o,r):o}(t,e,r,n);case"css":return Z(t,e,n);case"attribute":return V(t,e);default:return t[e]||0}}function $(t,e){var n=/^(\*=|\+=|-=)/.exec(t);if(!n)return t;var r=j(t)||0,a=parseFloat(e),o=parseFloat(t.replace(n[0],""));switch(n[0][0]){case"+":return a+o+r;case"-":return a-o+r;case"*":return a*o+r}}function Y(t,e){if(x.col(t))return function(t){return x.rgb(t)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(e=t))?"rgba("+n[1]+",1)":e:x.hex(t)?function(t){var e=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(t,e,n,r){return e+e+n+n+r+r})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(t):x.hsl(t)?function(t){var e,n,r,a=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(t),o=parseInt(a[1],10)/360,i=parseInt(a[2],10)/100,u=parseInt(a[3],10)/100,s=a[4]||1;function c(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}if(0==i)e=n=r=u;else{var l=u<.5?u*(1+i):u+i-u*i,f=2*u-l;e=c(f,l,o+1/3),n=c(f,l,o),r=c(f,l,o-1/3)}return"rgba("+255*e+","+255*n+","+255*r+","+s+")"}(t):void 0;var e,n}(t);if(/\s/g.test(t))return t;var n=j(t),r=n?t.substr(0,t.length-n.length):t;return e?r+e:r}function _(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function X(t){for(var e,n=t.points,r=0,a=0;a<n.numberOfItems;a++){var o=n.getItem(a);a>0&&(r+=_(e,o)),e=o}return r}function G(t){if(t.getTotalLength)return t.getTotalLength();switch(t.tagName.toLowerCase()){case"circle":return function(t){return 2*Math.PI*V(t,"r")}(t);case"rect":return function(t){return 2*V(t,"width")+2*V(t,"height")}(t);case"line":return function(t){return _({x:V(t,"x1"),y:V(t,"y1")},{x:V(t,"x2"),y:V(t,"y2")})}(t);case"polyline":return X(t);case"polygon":return function(t){var e=t.points;return X(t)+_(e.getItem(e.numberOfItems-1),e.getItem(0))}(t)}}function Q(t,e){var n=e||{},r=n.el||function(t){for(var e=t.parentNode;x.svg(e)&&x.svg(e.parentNode);)e=e.parentNode;return e}(t),a=r.getBoundingClientRect(),o=V(r,"viewBox"),i=a.width,u=a.height,s=n.viewBox||(o?o.split(" "):[0,0,i,u]);return{el:r,viewBox:s,x:s[0]/1,y:s[1]/1,w:i,h:u,vW:s[2],vH:s[3]}}function J(t,e,n){function r(n){void 0===n&&(n=0);var r=e+n>=1?e+n:0;return t.el.getPointAtLength(r)}var a=Q(t.el,t.svg),o=r(),i=r(-1),u=r(1),s=n?1:a.w/a.vW,c=n?1:a.h/a.vH;switch(t.property){case"x":return(o.x-a.x)*s;case"y":return(o.y-a.y)*c;case"angle":return 180*Math.atan2(u.y-i.y,u.x-i.x)/Math.PI}}function K(t,e){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,r=Y(x.pth(t)?t.totalLength:t,e)+"";return{original:r,numbers:r.match(n)?r.match(n).map(Number):[0],strings:x.str(t)||e?r.split(n):[]}}function tt(t){return F(t?O(x.arr(t)?t.map(D):D(t)):[],(function(t,e,n){return n.indexOf(t)===e}))}function et(t){var e=tt(t);return e.map((function(t,n){return{target:t,id:n,total:e.length,transforms:{list:U(t)}}}))}function nt(t,e){var n=N(e);if(/^spring/.test(n.easing)&&(n.duration=B(n.easing)),x.arr(t)){var r=t.length;2!==r||x.obj(t[0])?x.fnc(e.duration)||(n.duration=e.duration/r):t={value:t}}var a=x.arr(t)?t:[t];return a.map((function(t,n){var r=x.obj(t)&&!x.pth(t)?t:{value:t};return x.und(r.delay)&&(r.delay=n?0:e.delay),x.und(r.endDelay)&&(r.endDelay=n===a.length-1?e.endDelay:0),r})).map((function(t){return z(t,n)}))}var rt={css:function(t,e,n){return t.style[e]=n},attribute:function(t,e,n){return t.setAttribute(e,n)},object:function(t,e,n){return t[e]=n},transform:function(t,e,n,r,a){if(r.list.set(e,n),e===r.last||a){var o="";r.list.forEach((function(t,e){o+=e+"("+t+") "})),t.style.transform=o}}};function at(t,e){et(t).forEach((function(t){for(var n in e){var r=q(e[n],t),a=t.target,o=j(r),i=W(a,n,o,t),u=$(Y(r,o||j(i)),i),s=R(a,n);rt[s](a,n,u,t.transforms,!0)}}))}function ot(t,e){return F(O(t.map((function(t){return e.map((function(e){return function(t,e){var n=R(t.target,e.name);if(n){var r=function(t,e){var n;return t.tweens.map((function(r){var a=function(t,e){var n={};for(var r in t){var a=q(t[r],e);x.arr(a)&&1===(a=a.map((function(t){return q(t,e)}))).length&&(a=a[0]),n[r]=a}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(r,e),o=a.value,i=x.arr(o)?o[1]:o,u=j(i),s=W(e.target,t.name,u,e),c=n?n.to.original:s,l=x.arr(o)?o[0]:c,f=j(l)||j(s),d=u||f;return x.und(i)&&(i=c),a.from=K(l,d),a.to=K($(i,l),d),a.start=n?n.end:0,a.end=a.start+a.delay+a.duration+a.endDelay,a.easing=T(a.easing,a.duration),a.isPath=x.pth(o),a.isPathTargetInsideSVG=a.isPath&&x.svg(e.target),a.isColor=x.col(a.from.original),a.isColor&&(a.round=1),n=a,a}))}(e,t),a=r[r.length-1];return{type:n,property:e.name,animatable:t,tweens:r,duration:a.end,delay:r[0].delay,endDelay:a.endDelay}}}(t,e)}))}))),(function(t){return!x.und(t)}))}function it(t,e){var n=t.length,r=function(t){return t.timelineOffset?t.timelineOffset:0},a={};return a.duration=n?Math.max.apply(Math,t.map((function(t){return r(t)+t.duration}))):e.duration,a.delay=n?Math.min.apply(Math,t.map((function(t){return r(t)+t.delay}))):e.delay,a.endDelay=n?a.duration-Math.max.apply(Math,t.map((function(t){return r(t)+t.duration-t.endDelay}))):e.endDelay,a}var ut=0,st=[],ct=function(){var t;function e(n){for(var r=st.length,a=0;a<r;){var o=st[a];o.paused?(st.splice(a,1),r--):(o.tick(n),a++)}t=a>0?requestAnimationFrame(e):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){ft.suspendWhenDocumentHidden&&(lt()?t=cancelAnimationFrame(t):(st.forEach((function(t){return t._onDocumentVisibility()})),ct()))})),function(){t||lt()&&ft.suspendWhenDocumentHidden||!(st.length>0)||(t=requestAnimationFrame(e))}}();function lt(){return!!document&&document.hidden}function ft(t){void 0===t&&(t={});var e,n=0,r=0,a=0,o=0,i=null;function u(t){var e=window.Promise&&new Promise((function(t){return i=t}));return t.finished=e,e}var s=function(t){var e=L(p,t),n=L(m,t),r=function(t,e){var n=[],r=e.keyframes;for(var a in r&&(e=z(function(t){for(var e=F(O(t.map((function(t){return Object.keys(t)}))),(function(t){return x.key(t)})).reduce((function(t,e){return t.indexOf(e)<0&&t.push(e),t}),[]),n={},r=function(r){var a=e[r];n[a]=t.map((function(t){var e={};for(var n in t)x.key(n)?n==a&&(e.value=t[n]):e[n]=t[n];return e}))},a=0;a<e.length;a++)r(a);return n}(r),e)),e)x.key(a)&&n.push({name:a,tweens:nt(e[a],t)});return n}(n,t),a=et(t.targets),o=ot(a,r),i=it(o,n),u=ut;return ut++,z(e,{id:u,children:[],animatables:a,animations:o,duration:i.duration,delay:i.delay,endDelay:i.endDelay})}(t);function c(){var t=s.direction;"alternate"!==t&&(s.direction="normal"!==t?"normal":"reverse"),s.reversed=!s.reversed,e.forEach((function(t){return t.reversed=s.reversed}))}function l(t){return s.reversed?s.duration-t:t}function f(){n=0,r=l(s.currentTime)*(1/ft.speed)}function d(t,e){e&&e.seek(t-e.timelineOffset)}function h(t){for(var e=0,n=s.animations,r=n.length;e<r;){var a=n[e],o=a.animatable,i=a.tweens,u=i.length-1,c=i[u];u&&(c=F(i,(function(e){return t<e.end}))[0]||c);for(var l=y(t-c.start-c.delay,0,c.duration)/c.duration,f=isNaN(l)?1:c.easing(l),d=c.to.strings,h=c.round,p=[],m=c.to.numbers.length,g=void 0,v=0;v<m;v++){var b=void 0,w=c.to.numbers[v],x=c.from.numbers[v]||0;b=c.isPath?J(c.value,f*w,c.isPathTargetInsideSVG):x+f*(w-x),h&&(c.isColor&&v>2||(b=Math.round(b*h)/h)),p.push(b)}var M=d.length;if(M){g=d[0];for(var B=0;B<M;B++){d[B];var I=d[B+1],E=p[B];isNaN(E)||(g+=I?E+I:E+" ")}}else g=p[0];rt[a.type](o.target,a.property,g,o.transforms),a.currentValue=g,e++}}function g(t){s[t]&&!s.passThrough&&s[t](s)}function v(t){var f=s.duration,p=s.delay,m=f-s.endDelay,v=l(t);s.progress=y(v/f*100,0,100),s.reversePlayback=v<s.currentTime,e&&function(t){if(s.reversePlayback)for(var n=o;n--;)d(t,e[n]);else for(var r=0;r<o;r++)d(t,e[r])}(v),!s.began&&s.currentTime>0&&(s.began=!0,g("begin")),!s.loopBegan&&s.currentTime>0&&(s.loopBegan=!0,g("loopBegin")),v<=p&&0!==s.currentTime&&h(0),(v>=m&&s.currentTime!==f||!f)&&h(f),v>p&&v<m?(s.changeBegan||(s.changeBegan=!0,s.changeCompleted=!1,g("changeBegin")),g("change"),h(v)):s.changeBegan&&(s.changeCompleted=!0,s.changeBegan=!1,g("changeComplete")),s.currentTime=y(v,0,f),s.began&&g("update"),t>=f&&(r=0,s.remaining&&!0!==s.remaining&&s.remaining--,s.remaining?(n=a,g("loopComplete"),s.loopBegan=!1,"alternate"===s.direction&&c()):(s.paused=!0,s.completed||(s.completed=!0,g("loopComplete"),g("complete"),!s.passThrough&&"Promise"in window&&(i(),u(s)))))}return u(s),s.reset=function(){var t=s.direction;s.passThrough=!1,s.currentTime=0,s.progress=0,s.paused=!0,s.began=!1,s.loopBegan=!1,s.changeBegan=!1,s.completed=!1,s.changeCompleted=!1,s.reversePlayback=!1,s.reversed="reverse"===t,s.remaining=s.loop,e=s.children;for(var n=o=e.length;n--;)s.children[n].reset();(s.reversed&&!0!==s.loop||"alternate"===t&&1===s.loop)&&s.remaining++,h(s.reversed?s.duration:0)},s._onDocumentVisibility=f,s.set=function(t,e){return at(t,e),s},s.tick=function(t){a=t,n||(n=a),v((a+(r-n))*ft.speed)},s.seek=function(t){v(l(t))},s.pause=function(){s.paused=!0,f()},s.play=function(){s.paused&&(s.completed&&s.reset(),s.paused=!1,st.push(s),f(),ct())},s.reverse=function(){c(),s.completed=!s.reversed,f()},s.restart=function(){s.reset(),s.play()},s.remove=function(t){ht(tt(t),s)},s.reset(),s.autoplay&&s.play(),s}function dt(t,e){for(var n=e.length;n--;)S(t,e[n].animatable.target)&&e.splice(n,1)}function ht(t,e){var n=e.animations,r=e.children;dt(t,n);for(var a=r.length;a--;){var o=r[a],i=o.animations;dt(t,i),i.length||o.children.length||r.splice(a,1)}n.length||r.length||e.pause()}ft.version="3.2.1",ft.speed=1,ft.suspendWhenDocumentHidden=!0,ft.running=st,ft.remove=function(t){for(var e=tt(t),n=st.length;n--;)ht(e,st[n])},ft.get=W,ft.set=at,ft.convertPx=H,ft.path=function(t,e){var n=x.str(t)?P(t)[0]:t,r=e||100;return function(t){return{property:t,el:n,svg:Q(n),totalLength:G(n)*(r/100)}}},ft.setDashoffset=function(t){var e=G(t);return t.setAttribute("stroke-dasharray",e),e},ft.stagger=function(t,e){void 0===e&&(e={});var n=e.direction||"normal",r=e.easing?T(e.easing):null,a=e.grid,o=e.axis,i=e.from||0,u="first"===i,s="center"===i,c="last"===i,l=x.arr(t),f=l?parseFloat(t[0]):parseFloat(t),d=l?parseFloat(t[1]):0,h=j(l?t[1]:t)||0,p=e.start||0+(l?f:0),m=[],g=0;return function(t,e,v){if(u&&(i=0),s&&(i=(v-1)/2),c&&(i=v-1),!m.length){for(var y=0;y<v;y++){if(a){var b=s?(a[0]-1)/2:i%a[0],w=s?(a[1]-1)/2:Math.floor(i/a[0]),x=b-y%a[0],M=w-Math.floor(y/a[0]),B=Math.sqrt(x*x+M*M);"x"===o&&(B=-x),"y"===o&&(B=-M),m.push(B)}else m.push(Math.abs(i-y));g=Math.max.apply(Math,m)}r&&(m=m.map((function(t){return r(t/g)*g}))),"reverse"===n&&(m=m.map((function(t){return o?t<0?-1*t:-t:Math.abs(g-t)})))}return p+(l?(d-f)/g:f)*(Math.round(100*m[e])/100)+h}},ft.timeline=function(t){void 0===t&&(t={});var e=ft(t);return e.duration=0,e.add=function(n,r){var a=st.indexOf(e),o=e.children;function i(t){t.passThrough=!0}a>-1&&st.splice(a,1);for(var u=0;u<o.length;u++)i(o[u]);var s=z(n,L(m,t));s.targets=s.targets||t.targets;var c=e.duration;s.autoplay=!1,s.direction=e.direction,s.timelineOffset=x.und(r)?c:$(r,c),i(e),e.seek(s.timelineOffset);var l=ft(s);i(l),o.push(l);var f=it(o,t);return e.delay=f.delay,e.endDelay=f.endDelay,e.duration=f.duration,e.seek(0),e.reset(),e.autoplay&&e.play(),e},e},ft.easing=T,ft.penner=k,ft.random=function(t,e){return Math.floor(Math.random()*(e-t+1))+t};const pt=ft;var mt=function(t,e,n,r){function a(t,e){return Math.random()*(e-t)+t}this.radius=a(n,r),this.x=a(0,t.width),this.y=a(-20,-800),this.Vy=a(1,2),console.log(this.canvas),this.color="#FFF","colors"==e?this.color="rgb("+Math.floor(256*Math.random())+","+Math.floor(256*Math.random())+","+Math.floor(256*Math.random())+")":"blues"==e?this.color="rgb(0,0,"+Math.floor(256*Math.random())+")":"watermelon"==e?Math.random()<.5?this.color="rgb("+a(242,255)+","+a(0,50)+","+a(70,120)+")":this.color="rgb(0,"+Math.floor(256*Math.random())+",0)":"berry"==e?this.color="rgb("+a(40,150)+","+a(0,50)+","+a(80,180)+")":"pastel"==e&&(this.color="hsla("+a(0,360)+","+a(40,80)+"%,"+a(60,80)+"%)"),this.canvas=t,this.show=function(){var t=this.canvas.getContext("2d");t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.fillStyle=this.color,t.fill()},this.update=function(){this.y+=this.Vy}};const gt=document.getElementById("box-top"),vt=document.getElementById("box-bottom"),yt=(document.getElementById("path-top"),document.getElementById("path-bottom"),document.getElementById("bottom-svg")),bt=document.getElementById("person"),wt=document.getElementById("rules"),xt=document.getElementById("rules-container"),Mt=document.getElementById("title"),Bt=new URLSearchParams(window.location.search);let It=!0;if(Bt.has("data")){console.log(h(decodeURIComponent(Bt.get("data"))));try{let t=JSON.parse(h(decodeURIComponent(Bt.get("data"))));console.log(t),bt.innerText=t.recipient,t.specialRules?wt.innerText=t.specialRules:It=!1}catch(t){console.error(t),wt.innerText="There was an error parsing the data"}}const Et=new function(t){document.getElementById(t.id).style.position="fixed",document.getElementById(t.id).style.top=0,document.getElementById(t.id).style.left=0,document.getElementById(t.id).style.right=0,document.getElementById(t.id).style.bottom=0,document.getElementById(t.id).style.zIndex=1e3,document.getElementById(t.id).style.pointerEvents="none",this.canvas=document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,document.getElementById(t.id).appendChild(this.canvas);var e="default";"colors"!=t.theme&&"blues"!=t.theme&&"watermelon"!=t.theme&&"berry"!=t.theme&&"pastel"!=t.theme||(e=t.theme);var n=2,r=7;isNaN(t.min_size)||(n=t.min_size),isNaN(t.max_size)||(r=t.max_size),this.snowflakes=[];for(let t=0;t<250;t++)this.snowflakes[t]=new mt(this.canvas,e,n,r),this.snowflakes[t].show();function a(t,e){return Math.random()*(e-t)+t}this.go=!1,this.snowfall=function(){if(requestAnimationFrame((()=>this.snowfall())),this.go){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height);for(var t=0;t<250;t++)this.snowflakes[t].update(),this.snowflakes[t].show(),this.snowflakes[t].y>this.canvas.height&&(this.snowflakes[t].y=a(-20,-200))}},this.snowfall(),this.start=function(){this.go=!0},this.stop=function(){this.go=!1},this.toggle=function(){console.log(this.go),this.go=!this.go}}({id:"snow"});let Ct=pt.timeline({easing:"easeInOutExpo",duration:600,autoplay:!1}).add({begin:function(t){Mt.classList.add("hide")}}).add({targets:"#box-top",translateY:-800}).add({targets:"#box-bottom",translateY:800,rotateX:90}).add({targets:["#box-bottom","#box-top"],opacity:0},"+=300").add({begin:function(t){bt.classList.add("show")}},1300);It&&Ct.add({targets:xt,opacity:1},1300),Ct.finished.then((()=>{Et.start(),gt.style.display="none",vt.style.display="none"})),yt.addEventListener("click",(()=>{Ct.play()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,